// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "metrics", "tracing"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nim          String   @unique
  passwordHash String
  role         UserRole @default(STUDENT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  student Student?
  mentor  Mentor?
}

model Mentor {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user        User          @relation(fields: [userId], references: [id])
  mentorGroup MentorGroup[]
}

model MentorGroup {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mentorId  String   @db.Uuid
  groupId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  mentor Mentor @relation(fields: [mentorId], references: [id])
  group  Group  @relation(fields: [groupId], references: [id])
}

model Group {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  group     Int      @unique
  zoomLink  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  student     Student[]
  mentorGroup MentorGroup[]
}

model Student {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gender      Gender?
  firstName   String   @db.VarChar(50)
  lastName    String   @db.VarChar(50)
  fakultas    String   @db.VarChar(50)
  jurusan     String   @db.VarChar(50)
  phoneNumber String?  @unique @db.VarChar(15)
  imagePath   String?
  accepted    Boolean  @default(false)
  userId      String   @unique @db.Uuid
  groupId     String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  user       User                   @relation(fields: [userId], references: [id])
  group      Group                  @relation(fields: [groupId], references: [id])
  attendance Attendance[]
  submission AssignmentSubmission[]
}

model Attendance {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date      DateTime
  status    AttendanceStatus @default(TIDAK_HADIR)
  studentId String           @db.Uuid
  eventId   String           @db.Uuid
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt

  student Student           @relation(fields: [studentId], references: [id])
  event   Event             @relation(fields: [eventId], references: [id])
  reason  AttendanceReason?
}

model AttendanceReason {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reason       String?  @db.Text
  attendanceId String   @unique @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  attendance Attendance @relation(fields: [attendanceId], references: [id])
}

model Event {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String   @db.VarChar(50)
  materialPath String   @db.VarChar(255)
  startTime    DateTime
  endTime      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  attendances Attendance[]
}

model Assignment {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String   @db.VarChar(50)
  description String?  @db.Text
  deadline    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  submission AssignmentSubmission[]
}

model AssignmentSubmission {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  filePath     String   @db.VarChar(255)
  studentId    String   @db.Uuid
  assignmentId String   @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  student    Student    @relation(fields: [studentId], references: [id])
  assignment Assignment @relation(fields: [assignmentId], references: [id])
}

model Example {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum UserRole {
  MENTOR
  STUDENT
}

enum Gender {
  MALE
  FEMALE
}

enum AttendanceStatus {
  HADIR
  IZIN
  TIDAK_HADIR
}
